package database;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import database.ConnectionTest;
import model.HiringRecord;
import model.Room;
import model.Standard;
import model.Suite;

public class DBStore {

	Connection dbConnection;

	public DBStore() throws SQLException, ClassNotFoundException {
		try {
			dbConnection = ConnectionTest.getConnection("testDB");
			Statement stmt = dbConnection.createStatement();
			DatabaseMetaData dbm = dbConnection.getMetaData();
			ResultSet tables = dbm.getTables(null, null, "CityLodgeRooms", null);
			if (tables.next()) {
				System.out.println("Table already exits");
			} else {
				stmt.execute("CREATE TABLE IF NOT EXISTS CityLodgeRooms (\r\n" + "   ROOMID  VARCHAR(100) NOT NULL,\r\n"
						+ "   ROOMTYPE  VARCHAR(20) NOT NULL,\r\n" + "   BEDROOMCOUNT  INT NOT NULL,\r\n"
						+ "   LASTMAINTENANCEDATE DATE NULL,\r\n" + "   FEATURESUMMARY VARCHAR(50) NOT NULL,\r\n"
						+ "   RENTRATE DOUBLE NOT NULL,\r\n" + "   LATERATE DOUBLE NOT NULL,\r\n"
						+ "   IMAGE VARCHAR(100) NULL,\r\n" + "   DESCRIPTION VARCHAR(200) NOT NULL,\r\n"
						+ "   ROOMSTATUS VARCHAR(20) NOT NULL,\r\n" + "   PRIMARY KEY (roomId) \r\n );");

				stmt.execute("CREATE TABLE IF NOT EXISTS RentHistoryData (\r\n"
						+ "ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100, INCREMENT BY 1) PRIMARY KEY,"
						+ "   ROOMID  VARCHAR(100) NOT NULL,\r\n" + "   RECORDID  VARCHAR(100) NOT NULL,\r\n"
						+ "   START_DATE  DATE ,\r\n" + "   ESTIMATED_RETURN_DATE DATE,\r\n"
						+ "   ACTUAL_RETURN_DATE DATE ,\r\n" + "   RENTRATE DOUBLE,\r\n" + "   LATE_FEE DOUBLE,\r\n"
						+ "   TOTAL_RENT DOUBLE,\r\n" + "   CUSID VARCHAR(100) ,\r\n"
						+ "   FOREIGN KEY (ROOMID) REFERENCES CityLodgeRooms(ROOMID)" + ");");

				System.out.println("CityLodgeRooms created successfully");
				System.out.println("Table RentHistoryData created successfully");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * This method is used for adding new hiring record
	 * 
	 * @param hiringRecord
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 */
	public void addHiringRecord(HiringRecord hiringRecord) throws SQLException, ClassNotFoundException {
		dbConnection = ConnectionTest.getConnection("testDB");
		Statement stmt = dbConnection.createStatement();

		String sql = "INSERT INTO RentHistoryData (ROOMID, RECORDID, START_DATE, ESTIMATED_RETURN_DATE, ACTUAL_RETURN_DATE, RENTRATE, "
				+ "LATE_FEE, TOTAL_RENT, CUSID) values (";
		sql = sql + "'" + hiringRecord.getRoomID() + "', ";
		sql = sql + "'" + hiringRecord.getRecordID() + "', ";

		sql = sql + "'" + new java.sql.Date(hiringRecord.getRentDate().getTime()) + "', ";
		sql = sql + "'" + new java.sql.Date(hiringRecord.getEstimatedDate().getTime()) + "', ";

		if (hiringRecord.getActualReturnDate() != null) {
			sql = sql + "'" + new java.sql.Date(hiringRecord.getActualReturnDate().getTime()) + "', ";
		} else {
			sql = sql + null + ",";
		}
		sql = sql + "'" + hiringRecord.getRentFee() + "', ";
		sql = sql + "'" + hiringRecord.getLateFee() + "', ";
		sql = sql + "'" + hiringRecord.getTotalRentFee() + "', ";
		sql = sql + "'" + hiringRecord.getCustomerID() + "');";
		stmt.execute(sql);
	}

	/**
	 * This method is used for selecting total count of hiring records based on rent
	 * date and room ID
	 * 
	 * @param rentDate
	 * @param roomID
	 * @return
	 * @throws ClassNotFoundException
	 */
	public int getHiringRecordsCount(java.util.Date rentDate, String roomID) throws ClassNotFoundException {

		int returnValue = 0;
		try {
			dbConnection = ConnectionTest.getConnection("testDB");
			Statement stmt = dbConnection.createStatement();

			String sql = "SELECT COUNT(*) TOTALCOUNT" + " FROM RentHistoryData WHERE START_DATE <= " + "'"
					+ new java.sql.Date(rentDate.getTime()) + "'" + " AND ESTIMATED_RETURN_DATE >= " + "'"
					+ new java.sql.Date(rentDate.getTime()) + "'" + " AND ACTUAL_RETURN_DATE IS NULL AND ROOMID = "
					+ "'" + roomID + "';";
			ResultSet result = stmt.executeQuery(sql);
			while (result.next()) {
				returnValue = result.getInt("TOTALCOUNT");
				break;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return returnValue;
	}

	/**
	 * THis method is used for adding new rooms to the db
	 * 
	 * @param rooms
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 */
	public void addRoom(Room rooms) throws SQLException, ClassNotFoundException {

		dbConnection = ConnectionTest.getConnection("testDB");
		Statement stmt = dbConnection.createStatement();
		String sql = "";
		if (rooms.getRoomType().equalsIgnoreCase("SUITE")) {
			sql = "insert into  CityLodgeRooms (" + "ROOMID," + "ROOMTYPE," + "BEDROOMCOUNT," + "FEATURESUMMARY,"
					+ "LASTMAINTENANCEDATE," + "RENTRATE," + "LATERATE," + "IMAGE," + "DESCRIPTION,"
					+ "ROOMSTATUS) values (";

		} else {
			sql = "insert into  CityLodgeRooms (" + "ROOMID," + "ROOMTYPE," + "BEDROOMCOUNT," + "FEATURESUMMARY,"
					+ "RENTRATE," + "LATERATE," + "IMAGE," + "DESCRIPTION," + "ROOMSTATUS) values (";
		}

		sql = sql + "'" + rooms.getRoomID() + "', ";
		sql = sql + "'" + rooms.getRoomType() + "', ";
		sql = sql + rooms.getTotalBedrooms() + ", ";
		sql = sql + "'" + rooms.getFeatureSummary() + "', ";
		if (rooms.getRoomType().equalsIgnoreCase("SUITE")) {
			sql = sql + "'" + new java.sql.Date(rooms.getLastMaintenanceDate().getTime()) + "', ";

		}
		sql = sql + "" + rooms.getRentFee() + ", ";
		sql = sql + "" + rooms.getLateFee() + ", ";
		sql = sql + "'" + rooms.getImage_name() + "', ";
		sql = sql + "'" + rooms.getDescription() + "', ";
		sql = sql + "'" + rooms.getRoomStatus() + "'";
		sql = sql + ");";
		stmt.executeUpdate(sql);
		System.out.println("New Room added successfully");
	}

	/**
	 * This method is used for selecting room by room ID
	 * 
	 * @param roomID
	 * @return
	 * @throws ClassNotFoundException
	 */
	public Room selectRoomByID(String roomID) throws ClassNotFoundException {
		Room roomObj = null;
		try {
			dbConnection = ConnectionTest.getConnection("testDB");
			Statement stmt = dbConnection.createStatement();

			String sql = "SELECT ROOMID, ROOMTYPE, BEDROOMCOUNT,LASTMAINTENANCEDATE, FEATURESUMMARY"
					+ ", RENTRATE, LATERATE, IMAGE,DESCRIPTION, ROOMSTATUS FROM CityLodgeRooms WHERE 1=1";
			sql = sql + " AND ROOMID = " + "'" + roomID + "';";
			ResultSet result = stmt.executeQuery(sql);
			while (result.next()) {
				if (result.getString("ROOMTYPE").equalsIgnoreCase("STANDARD")) {

					roomObj = new Standard(result.getString("ROOMID"), result.getInt("BEDROOMCOUNT"),
							result.getString("FEATURESUMMARY"), result.getString("ROOMTYPE"),
							result.getString("ROOMSTATUS"), result.getDouble("RENTRATE"), result.getDouble("LATERATE"),
							result.getString("IMAGE"), result.getString("DESCRIPTION"));
				} else {
					roomObj = new Suite(result.getString("ROOMID"), result.getInt("BEDROOMCOUNT"),
							result.getString("FEATURESUMMARY"), result.getString("ROOMTYPE"),
							result.getString("ROOMSTATUS"), result.getDate("LASTMAINTENANCEDATE"),
							result.getDouble("RENTRATE"), result.getDouble("LATERATE"), result.getString("IMAGE"),
							result.getString("DESCRIPTION"));
				}
				roomObj.setRoomID(result.getString("ROOMID"));
				roomObj.setRoomType(result.getString("ROOMTYPE"));
				roomObj.setTotalBedrooms(result.getInt("BEDROOMCOUNT"));
				roomObj.setFeatureSummary(result.getString("FEATURESUMMARY"));
				roomObj.setRentFee(result.getDouble("RENTRATE"));
				roomObj.setLateFee(result.getDouble("LATERATE"));
				roomObj.setImage_name(result.getString("IMAGE"));
				roomObj.setDescription(result.getString("DESCRIPTION"));
				roomObj.setRoomStatus(result.getString("ROOMSTATUS"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return roomObj;
	}

	/**
	 * This method is used for updating all rooms status on the basis of Room iD and
	 * Current Status
	 * 
	 * @param roomID
	 * @param roomStatus
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public void updateRoomStatus(String roomID, String roomStatus) throws ClassNotFoundException, SQLException {

		dbConnection = ConnectionTest.getConnection("testDB");
		Statement stmt = dbConnection.createStatement();
		String sql = "UPDATE CityLodgeRooms SET ROOMSTATUS = " + "'" + roomStatus + "'" + " WHERE ROOMID = " + "'"
				+ roomID + "';";
		stmt.executeQuery(sql);
		System.out.println(sql);
	}

	/**
	 * This method is used for updating maintenance date of Suite Room
	 * 
	 * @param roomID
	 * @param roomStatus
	 * @param completionDate
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public void updateSuiteMaintenanceDate(String roomID, String roomStatus, java.util.Date completionDate)
			throws ClassNotFoundException, SQLException {

		dbConnection = ConnectionTest.getConnection("testDB");
		Statement stmt = dbConnection.createStatement();
		String sql = "UPDATE CityLodgeRooms SET ROOMSTATUS = " + "'" + roomStatus + "'" + ",LASTMAINTENANCEDATE =" + "'"
				+ new java.sql.Date(completionDate.getTime()) + "'" + " WHERE ROOMID = " + "'" + roomID + "';";
		stmt.executeQuery(sql);
	}

	/**
	 * This method is used for updating hiring record details
	 * 
	 * @param hiringRecord
	 * @throws ClassNotFoundException
	 */
	public void updateHiringRecord(HiringRecord hiringRecord) throws ClassNotFoundException {

		try {
			dbConnection = ConnectionTest.getConnection("testDB");
			Statement stmt = dbConnection.createStatement();

			String sql = "UPDATE RentHistoryData SET ACTUAL_RETURN_DATE =" + "'"
					+ new java.sql.Date(hiringRecord.getActualReturnDate().getTime()) + "'" + ",RENTRATE =" + "'"
					+ hiringRecord.getRentFee() + "'" + ", LATE_FEE = " + "'" + hiringRecord.getLateFee() + "'"
					+ ", TOTAL_RENT = " + "'" + hiringRecord.getTotalRentFee() + "'" + " WHERE RECORDID = " + "'"
					+ hiringRecord.getRecordID() + "';";

			System.out.println("update Hiring Record");
			stmt.executeQuery(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * This method is used for fing hiring records based on ID
	 * 
	 * @param roomID
	 * @return
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 */
	public List<HiringRecord> findAllHiringRecords(String roomID) throws SQLException, ClassNotFoundException {

		dbConnection = ConnectionTest.getConnection("testDB");
		Statement stmt = dbConnection.createStatement();

		String sql = "SELECT * FROM RentHistoryData WHERE ROOMID = " + "'" + roomID + "'" + " ORDER BY START_DATE DESC";

		ResultSet rs = stmt.executeQuery(sql);
		List<HiringRecord> hiringRecords = new ArrayList<>();
		HiringRecord hiringRecord = null;

		while (rs.next()) {
			hiringRecord = new HiringRecord();
			hiringRecord.setRecordID(rs.getString("RECORDID"));
			hiringRecord.setCustomerID(rs.getString("CUSID"));
			hiringRecord.setRoomID(rs.getString("ROOMID"));
			hiringRecord.setRentDate(rs.getDate("START_DATE"));
			hiringRecord.setEstimatedDate(rs.getDate("ESTIMATED_RETURN_DATE"));

			Date actualRetunDate = null;
			if (rs.getDate("ACTUAL_RETURN_DATE") != null) {
				actualRetunDate = rs.getDate("ACTUAL_RETURN_DATE");
			}
			hiringRecord.setActualReturnDate(actualRetunDate);
			hiringRecord.setRentFee(rs.getDouble("RENTRATE"));
			hiringRecord.setLateFee(rs.getDouble("LATE_FEE"));
			hiringRecord.setTotalRentFee(rs.getDouble("TOTAL_RENT"));
			hiringRecords.add(hiringRecord);
		}

		return hiringRecords;
	}

	/**
	 * This method is used for finding latest record from Hiring records
	 * 
	 * @param roomID
	 * @return
	 * @throws ClassNotFoundException
	 */
	public HiringRecord findLatestHiringRecord(String roomID) throws ClassNotFoundException {

		try {
			dbConnection = ConnectionTest.getConnection("testDB");
			Statement stmt = dbConnection.createStatement();

			String sql = "SELECT * " + " FROM RentHistoryData WHERE ACTUAL_RETURN_DATE IS NULL AND ROOMID = " + "'"
					+ roomID + "';";

			System.out.println(sql);
			ResultSet rs = stmt.executeQuery(sql);
			HiringRecord hiringRecord = null;

			while (rs.next()) {
				hiringRecord = new HiringRecord();
				hiringRecord.setRecordID(rs.getString("RECORDID"));
				hiringRecord.setCustomerID(rs.getString("CUSID"));
				hiringRecord.setRoomID(rs.getString("ROOMID"));
				hiringRecord.setRentDate(rs.getDate("START_DATE"));
				hiringRecord.setEstimatedDate(rs.getDate("ESTIMATED_RETURN_DATE"));
				hiringRecord.setRentFee(rs.getDouble("RENTRATE"));
				hiringRecord.setLateFee(rs.getDouble("LATE_FEE"));
				hiringRecord.setTotalRentFee(rs.getDouble("TOTAL_RENT"));
				break;
			}
			return hiringRecord;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * This method is used for selecting all rooms
	 * 
	 * @return
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 */

	public List<Room> selectAllRooms() throws SQLException, ClassNotFoundException {

		Room roomObj = null;
		try {
			dbConnection = ConnectionTest.getConnection("testDB");
			Statement stmt = dbConnection.createStatement();
			List<Room> roomdetails = new ArrayList<>();

			ResultSet result = null;

			String sql = "SELECT ROOMID, ROOMTYPE, BEDROOMCOUNT,LASTMAINTENANCEDATE, FEATURESUMMARY"
					+ ", RENTRATE, LATERATE, IMAGE,DESCRIPTION, ROOMSTATUS FROM CityLodgeRooms WHERE 1=1";

			result = stmt.executeQuery(sql);
			while (result.next()) {
				if (result.getString("ROOMTYPE").equalsIgnoreCase("STANDARD")) {

					roomObj = new Standard(result.getString("ROOMID"), result.getInt("BEDROOMCOUNT"),
							result.getString("FEATURESUMMARY"), result.getString("ROOMTYPE"),
							result.getString("ROOMSTATUS"), result.getDouble("RENTRATE"), result.getDouble("LATERATE"),
							result.getString("IMAGE"), result.getString("DESCRIPTION"));
				} else {
					roomObj = new Suite(result.getString("ROOMID"), result.getInt("BEDROOMCOUNT"),
							result.getString("FEATURESUMMARY"), result.getString("ROOMTYPE"),
							result.getString("ROOMSTATUS"), result.getDate("LASTMAINTENANCEDATE"),
							result.getDouble("RENTRATE"), result.getDouble("LATERATE"), result.getString("IMAGE"),
							result.getString("DESCRIPTION"));
				}
				roomObj.setRoomID(result.getString("ROOMID"));
				roomObj.setRoomType(result.getString("ROOMTYPE"));
				roomObj.setTotalBedrooms(result.getInt("BEDROOMCOUNT"));
				roomObj.setFeatureSummary(result.getString("FEATURESUMMARY"));
				roomObj.setRentFee(result.getDouble("RENTRATE"));
				roomObj.setLateFee(result.getDouble("LATERATE"));
				roomObj.setImage_name(result.getString("IMAGE"));
				roomObj.setDescription(result.getString("DESCRIPTION"));
				roomObj.setRoomStatus(result.getString("ROOMSTATUS"));
				roomdetails.add(roomObj);
			}
			return roomdetails;

		} catch (Exception e) {
			e.printStackTrace(System.out);
		}
		return null;
	}

}